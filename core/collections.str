module core

/// A type which produces values.
pub category Generator<of: Element> {
    fun next(mut &self) -> Element?
}

/// A more refined form of a generator, specific to iterating through sequential data.
pub category Iterator<of: Element>: Generator<of: Element>

/// A type which provides a way to consume a sequence of values through iteration.
pub category Sequence<of: Element, Iter> where Iter: Iterator<of: Element> {
    fun iterator(self) -> Iter
}

/// A type which provides a way to observe a sequence of values through iteration.
pub category BorrowingSequence<of: Element, Iter> where Iter: Iterator<of: &Element> {
    fun borrowing_iterator(&self) -> Iter
}

/// A type which provides a way to mutate a sequence of values through iteration.
pub category MutableSequence<of: Element, Iter> where Iter: Iterator<of: mut &Element> {
    fun mutating_iterator(mut &self) -> Iter
}

/// A sequence which can be traversed multiple times, nondestructively, and observed through an indexed subscript.
pub category Collection<of: Element, Index> {
    subscript(&self, Index) -> &Element
}

/// A sequence which can be traversed multiple times, nondestructively, and mutated through an indexed subscript.
pub category MutableCollection<of: Element, Index>: Collection<of: Element, Index> {
    subscript(mut &self, Index) -> mut &Element
}

pub category Appendable<with: Element>: MutableCollection<of: Element> {
    fun append(mut &self, _ element: Element)

    fun append(mut &self, contents of other: Sequence) {
        for element in other {
            try self.append(element)
        }
    }
}

pub category Prependable<with: Element>: MutableCollection<of: Element> {
    fun prepend(mut &self, _ element: Element)

    fun prepend(mut &self, contents of other: Sequence) {
        for element in other {
            try self.prepend(element)
        }
    }
}
