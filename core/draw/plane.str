module core.draw

pub trait Plane {
    fun get(&self, x: Int, y: Int) -> Color
}

pub trait SizedPlane: Plane {
    fun width(&self) -> Int
    fun height(&self) -> Int
}

pub trait MutablePlane: Plane {
    fun set(&mut self, x: Int, y: Int, color: Color)
}

pub trait PrimitivePlane: Plane {
    init(flattening plane: &some SizedPlane) -> Self
}

pub extend Plane {
    fun flatten<T>(&self) -> T where T: PrimitivePlane {
        T(flattening: self)
    }
}

pub struct PlaneSlice<Inner> where Inner: Plane {
    pub inner: Inner
    pub x: Int
    pub y: Int
    width: Int
    height: Int
}

pub extend PlaneSlice: Plane {
    fun get(&self, x: Int, y: Int) -> Color {
        self.inner.get(x: x + self.x, y: y + self.y)
    }
}

pub extend PlaneSlice: SizedPlane where Inner: SizedPlane {
    fun width(&self) -> Int {
        self.width
    }

    fun height(&self) -> Int {
        self.height
    }
}

pub extend PlaneSlice: MutablePlane where Inner: MutablePlane {
    fun set(&mut self, x: Int, y: Int, color: Color) {
        self.inner.set(x: x + self.x, y: y + self.y, color: color)
    }
}
